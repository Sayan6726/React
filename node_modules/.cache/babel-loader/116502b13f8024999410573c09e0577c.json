{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/html/react-weather-app/src/app/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport Home from './Home';\nimport Info from './Info';\nimport Loader from '../components/Loader';\nimport Error from '../components/Error';\nimport rAFTimeout from '../helpers/rAFTimeout';\nimport Storage from './storage';\nimport './index.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.loader = /*#__PURE__*/React.createRef();\n    this.onInfoClick = this.onInfoClick.bind(this);\n    this.onInfoClose = this.onInfoClose.bind(this);\n    this.onRefreshClick = this.onRefreshClick.bind(this);\n    this.onGPSLocationClick = this.onGPSLocationClick.bind(this);\n    this.storage = new Storage(process.env.REACT_APP_DARK_SKY_API_CODE);\n    this.state = { ...this.storage.data\n    };\n  }\n\n  async init() {\n    rAFTimeout(() => this.loader.current.animateIn(), 100);\n    await this.storage.fetch();\n    rAFTimeout(() => {\n      this.loader.current.animateOut();\n      rAFTimeout(() => this.updatedState(this.storage), 600);\n    }, 1000);\n  }\n\n  updatedState({\n    ipGeoLocation,\n    data\n  }) {\n    if (ipGeoLocation.data && ipGeoLocation.data.error) {\n      this.setState({\n        error: ipGeoLocation.data.error,\n        dataLoaded: true\n      });\n    } else {\n      this.setState({ ...data,\n        showInfo: false,\n        dataLoaded: true,\n        updating: false\n      });\n    }\n  }\n\n  async onGetCurrentLocation({\n    latitude,\n    longitude\n  }) {\n    await this.storage.getLocation(latitude, longitude);\n    rAFTimeout(() => this.updatedState(this.storage), 600);\n  }\n\n  onGPSLocationClick() {\n    if (!this.state.updating) {\n      this.setState({\n        updating: true\n      });\n\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          this.onGetCurrentLocation(position.coords);\n        });\n      }\n    }\n  }\n\n  onRefreshClick() {\n    const {\n      latitude,\n      longitude\n    } = this.storage.data;\n\n    if (!this.state.updating) {\n      this.setState({\n        updating: true\n      });\n      this.onGetCurrentLocation({\n        latitude,\n        longitude\n      });\n    }\n  }\n\n  onInfoClick() {\n    this.setState({\n      showInfo: true\n    });\n  }\n\n  onInfoClose() {\n    this.setState({\n      showInfo: false\n    });\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  errorReachLimit() {\n    return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 12\n    }, this);\n  }\n\n  display() {\n    return this.state.error ? this.errorReachLimit() : this.displayHome();\n  }\n\n  displayHome() {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Home, {\n        currentCondition: this.state.currentCondition,\n        foreCastDaily: this.state.foreCastDaily,\n        foreCastHourly: this.state.foreCastHourly,\n        onInfoClick: this.onInfoClick,\n        onGPSLocationClick: this.onGPSLocationClick,\n        updating: this.state.updating,\n        lastUpdate: this.state.lastUpdate,\n        onRefreshClick: this.onRefreshClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Info, {\n        onInfoClose: this.onInfoClose,\n        show: this.state.showInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: !this.state.dataLoaded ? /*#__PURE__*/_jsxDEV(Loader, {\n        ref: this.loader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 36\n      }, this) : this.display()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/var/www/html/react-weather-app/src/app/index.js"],"names":["React","Component","Fragment","Home","Info","Loader","Error","rAFTimeout","Storage","App","constructor","loader","createRef","onInfoClick","bind","onInfoClose","onRefreshClick","onGPSLocationClick","storage","process","env","REACT_APP_DARK_SKY_API_CODE","state","data","init","current","animateIn","fetch","animateOut","updatedState","ipGeoLocation","error","setState","dataLoaded","showInfo","updating","onGetCurrentLocation","latitude","longitude","getLocation","navigator","geolocation","getCurrentPosition","position","coords","componentDidMount","errorReachLimit","display","displayHome","currentCondition","foreCastDaily","foreCastHourly","lastUpdate","render"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport Home from './Home';\nimport Info from './Info';\nimport Loader from '../components/Loader';\nimport Error from '../components/Error';\nimport rAFTimeout from '../helpers/rAFTimeout';\nimport Storage from './storage';\nimport './index.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loader = React.createRef();\n    this.onInfoClick = this.onInfoClick.bind(this);\n    this.onInfoClose = this.onInfoClose.bind(this);\n    this.onRefreshClick = this.onRefreshClick.bind(this);\n    this.onGPSLocationClick = this.onGPSLocationClick.bind(this);\n\n    this.storage = new Storage(process.env.REACT_APP_DARK_SKY_API_CODE);\n    this.state = { ...this.storage.data };\n  }\n\n  async init() {\n    rAFTimeout(() => this.loader.current.animateIn(), 100);\n\n    await this.storage.fetch();\n\n    rAFTimeout(() => {\n      this.loader.current.animateOut();\n\n      rAFTimeout(() => this.updatedState(this.storage), 600);\n    }, 1000);\n  }\n\n  updatedState({ ipGeoLocation, data }) {\n    if (ipGeoLocation.data && ipGeoLocation.data.error) {\n      this.setState({\n        error: ipGeoLocation.data.error,\n        dataLoaded: true,\n      });\n    } else {\n      this.setState({\n        ...data,\n        showInfo: false,\n        dataLoaded: true,\n        updating: false,\n      });\n    }\n  }\n\n  async onGetCurrentLocation({ latitude, longitude }) {\n    await this.storage.getLocation(latitude, longitude);\n\n    rAFTimeout(() => this.updatedState(this.storage), 600);\n  }\n\n  onGPSLocationClick() {\n    if (!this.state.updating) {\n      this.setState({ updating: true });\n\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          this.onGetCurrentLocation(position.coords);\n        });\n      }\n    }\n  }\n  onRefreshClick() {\n    const { latitude, longitude } = this.storage.data;\n\n    if (!this.state.updating) {\n      this.setState({ updating: true });\n\n      this.onGetCurrentLocation({ latitude, longitude });\n    }\n  }\n\n  onInfoClick() {\n    this.setState({ showInfo: true });\n  }\n\n  onInfoClose() {\n    this.setState({ showInfo: false });\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  errorReachLimit() {\n    return <Error/>\n  }\n\n  display() {\n    return (this.state.error ? this.errorReachLimit() : this.displayHome());\n  }\n\n  displayHome() {\n    return (\n      <Fragment>\n        <Home currentCondition={this.state.currentCondition}\n          foreCastDaily={this.state.foreCastDaily}\n          foreCastHourly={this.state.foreCastHourly}\n          onInfoClick={this.onInfoClick}\n          onGPSLocationClick={this.onGPSLocationClick}\n          updating={this.state.updating}\n          lastUpdate={this.state.lastUpdate}\n          onRefreshClick={this.onRefreshClick} />\n        <Info onInfoClose={this.onInfoClose} show={this.state.showInfo} />\n      </Fragment>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          !this.state.dataLoaded ? <Loader ref={this.loader} /> : this.display()\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}