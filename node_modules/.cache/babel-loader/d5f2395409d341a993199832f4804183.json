{"ast":null,"code":"import IpGeoLocation from '../api/ipGeoLocation';\nimport ForeCastAPI from '../api/foreCastAPI';\nimport ReverseGeoLocation from '../api/reverseGeoLocation';\nimport IpFetcher from '../api/ipfetcher';\nimport timeConvert, { addLeadingZero } from '../helpers/time';\nimport icons from '../helpers/icons';\nimport weekdays from '../helpers/weekdays';\nimport initialState from '../initialState';\nexport default class Storage {\n  constructor() {\n    this.ipFetcher = new IpFetcher();\n    this.ipGeoLocation = new IpGeoLocation();\n    this.foreCastAPI = new ForeCastAPI(process.env.REACT_APP_DARK_SKY_API_CODE);\n    this.reverseGeoLocation = new ReverseGeoLocation();\n    this.data = { ...initialState\n    };\n    this.currentDate = new Date();\n  }\n\n  update() {\n    if (!this.ipGeoLocation.data.error) {\n      this.data = {\n        latitude: this.foreCastAPI.data.latitude,\n        longitude: this.foreCastAPI.data.longitude,\n        lastUpdate: this.getLastUpdate(this.currentDate),\n        currentCondition: { ...initialState,\n          location: this.ipGeoLocation.data.city,\n          date: timeConvert(this.foreCastAPI.data.currently.time).localeDateString,\n          temperature: Math.round(this.foreCastAPI.data.currently.temperature),\n          weather: this.foreCastAPI.data.currently.summary\n        },\n        foreCastHourly: this.foreCastAPI.data.hourly.data.slice(0, 5).map(item => ({\n          time: timeConvert(item.time).hours,\n          rainProbability: Math.round(item.precipProbability * 100),\n          temperature: Math.round(item.temperature),\n          icon: icons(item.icon).id\n        })),\n        foreCastDaily: this.foreCastAPI.data.daily.data.slice(1, 6).map(item => ({\n          weekDay: weekdays(timeConvert(item.time).weekDay),\n          rainProbability: Math.round(item.precipProbability * 100),\n          icon: icons(item.icon).id,\n          temperature: {\n            max: Math.round(item.temperatureMax),\n            min: Math.round(item.temperatureMin)\n          }\n        }))\n      };\n    }\n  }\n\n  getLastUpdate(currentDate) {\n    return `${addLeadingZero(currentDate.getHours())}:${addLeadingZero(currentDate.getMinutes())}`;\n  }\n\n  async _updateIP() {\n    if (localStorage.getItem('ip')) {\n      this.ipFetcher.ip = localStorage.getItem('ip');\n    } else {\n      await this.ipFetcher.fetch();\n\n      if (this.ipFetcher.isValid()) {\n        localStorage.setItem('ip', this.ipFetcher.ip);\n      }\n    }\n  }\n\n  async _updateGeoLocation() {\n    if (localStorage.getItem('geoLocation')) {\n      this.ipGeoLocation.data = JSON.parse(localStorage.getItem('geoLocation'));\n    } else {\n      await this.ipGeoLocation.fetch(this.ipFetcher.ip);\n\n      if (this.ipGeoLocation.data.city) {\n        localStorage.setItem('geoLocation', JSON.stringify(this.ipGeoLocation.data));\n      }\n    }\n  }\n\n  async _updateForecast() {\n    if (localStorage.getItem('forecast')) {\n      this.foreCastAPI.data = JSON.parse(localStorage.getItem('forecast'));\n    } else {\n      await this.foreCastAPI.fetch(this.ipGeoLocation.data.latitude, this.ipGeoLocation.data.longitude);\n\n      if (this.foreCastAPI.data.timezone) {\n        localStorage.setItem('lastupdate', new Date().toString());\n        localStorage.setItem('forecast', JSON.stringify(this.foreCastAPI.data));\n      }\n    }\n  }\n\n  async fetch() {\n    if (this.updateCache()) {\n      localStorage.clear();\n    }\n\n    await this._updateIP();\n    await this._updateGeoLocation();\n    await this._updateForecast();\n    this.update();\n  }\n\n  updateCache() {\n    this.currentDate = new Date();\n    const prevDate = localStorage.getItem('lastupdate');\n    const ms = this.currentDate - new Date(prevDate);\n    const min = Math.floor(ms / 1000 / 60 << 0);\n    const sec = Math.floor(ms / 1000 % 60);\n    return min > 58 && sec > 0;\n  }\n\n  async getLocation(latitude, longitude) {\n    this.foreCastAPI.data.latitude = latitude;\n    this.foreCastAPI.data.longitude = longitude;\n    this.data.lastUpdate = this.getLastUpdate(this.currentDate);\n\n    if (this.updateCache()) {\n      localStorage.clear();\n      await this.reverseGeoLocation.fetch(latitude, longitude);\n      await this.foreCastAPI.fetch(latitude, longitude);\n      localStorage.setItem('lastupdate', this.currentDate.toString());\n      localStorage.setItem('forecast', JSON.stringify(this.foreCastAPI.data));\n      this.ipGeoLocation.data.city = this.reverseGeoLocation.data[0].city || this.reverseGeoLocation.data[0].state;\n      this.update();\n    }\n  }\n\n}","map":{"version":3,"sources":["/var/www/html/react-weather-app/src/app/storage.js"],"names":["IpGeoLocation","ForeCastAPI","ReverseGeoLocation","IpFetcher","timeConvert","addLeadingZero","icons","weekdays","initialState","Storage","constructor","ipFetcher","ipGeoLocation","foreCastAPI","process","env","REACT_APP_DARK_SKY_API_CODE","reverseGeoLocation","data","currentDate","Date","update","error","latitude","longitude","lastUpdate","getLastUpdate","currentCondition","location","city","date","currently","time","localeDateString","temperature","Math","round","weather","summary","foreCastHourly","hourly","slice","map","item","hours","rainProbability","precipProbability","icon","id","foreCastDaily","daily","weekDay","max","temperatureMax","min","temperatureMin","getHours","getMinutes","_updateIP","localStorage","getItem","ip","fetch","isValid","setItem","_updateGeoLocation","JSON","parse","stringify","_updateForecast","timezone","toString","updateCache","clear","prevDate","ms","floor","sec","getLocation","state"],"mappings":"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","sourcesContent":["import IpGeoLocation from '../api/ipGeoLocation';\nimport ForeCastAPI from '../api/foreCastAPI';\nimport ReverseGeoLocation from '../api/reverseGeoLocation';\nimport IpFetcher from '../api/ipfetcher';\nimport timeConvert, { addLeadingZero } from '../helpers/time';\nimport icons from '../helpers/icons';\nimport weekdays from '../helpers/weekdays';\nimport initialState from '../initialState';\n\nexport default class Storage {\n  constructor() {\n    this.ipFetcher = new IpFetcher();\n    this.ipGeoLocation = new IpGeoLocation();\n    this.foreCastAPI = new ForeCastAPI(process.env.REACT_APP_DARK_SKY_API_CODE);\n    this.reverseGeoLocation = new ReverseGeoLocation();\n    this.data = { ...initialState };\n    this.currentDate = new Date();\n  }\n\n  update() {\n    if (!this.ipGeoLocation.data.error) {\n      this.data = {\n        latitude: this.foreCastAPI.data.latitude,\n        longitude: this.foreCastAPI.data.longitude,\n        lastUpdate: this.getLastUpdate(this.currentDate),\n        currentCondition: {\n          ...initialState,\n          location: this.ipGeoLocation.data.city,\n          date: timeConvert(this.foreCastAPI.data.currently.time).localeDateString,\n          temperature: Math.round(this.foreCastAPI.data.currently.temperature),\n          weather: this.foreCastAPI.data.currently.summary\n        },\n        foreCastHourly: this.foreCastAPI.data.hourly.data.slice(0, 5).map((item) => ({\n          time: timeConvert(item.time).hours,\n          rainProbability: Math.round(item.precipProbability * 100),\n          temperature: Math.round(item.temperature),\n          icon: icons(item.icon).id\n        })),\n        foreCastDaily: this.foreCastAPI.data.daily.data.slice(1, 6).map(item => ({\n          weekDay: weekdays(timeConvert(item.time).weekDay),\n          rainProbability: Math.round(item.precipProbability * 100),\n          icon: icons(item.icon).id,\n          temperature: {\n            max: Math.round(item.temperatureMax),\n            min: Math.round(item.temperatureMin)\n          }\n        }))\n      }\n    }\n\n  }\n\n  getLastUpdate(currentDate) {\n    return `${addLeadingZero(currentDate.getHours())}:${addLeadingZero(currentDate.getMinutes())}`;\n  }\n\n  async _updateIP() {\n    if (localStorage.getItem('ip')) {\n      this.ipFetcher.ip = localStorage.getItem('ip');\n    } else {\n      await this.ipFetcher.fetch();\n\n      if (this.ipFetcher.isValid()) {\n        localStorage.setItem('ip', this.ipFetcher.ip);\n      }\n    }\n  }\n\n  async _updateGeoLocation() {\n    if (localStorage.getItem('geoLocation')) {\n      this.ipGeoLocation.data = JSON.parse(localStorage.getItem('geoLocation'));\n    } else {\n      await this.ipGeoLocation.fetch(this.ipFetcher.ip);\n\n      if (this.ipGeoLocation.data.city) {\n        localStorage.setItem('geoLocation', JSON.stringify(this.ipGeoLocation.data));\n      }\n    }\n  }\n\n  async _updateForecast() {\n    if (localStorage.getItem('forecast')) {\n      this.foreCastAPI.data = JSON.parse(localStorage.getItem('forecast'));\n    } else {\n      await this.foreCastAPI.fetch(this.ipGeoLocation.data.latitude, this.ipGeoLocation.data.longitude);\n\n      if (this.foreCastAPI.data.timezone) {\n        localStorage.setItem('lastupdate', new Date().toString());\n        localStorage.setItem('forecast', JSON.stringify(this.foreCastAPI.data));\n      }\n    }\n  }\n\n  async fetch() {\n    if (this.updateCache()) {\n      localStorage.clear();\n    }\n    await this._updateIP();\n    await this._updateGeoLocation();\n    await this._updateForecast();\n\n    this.update();\n  }\n\n  updateCache() {\n    this.currentDate = new Date();\n    const prevDate = localStorage.getItem('lastupdate');\n    const ms = this.currentDate - new Date(prevDate);\n    const min = Math.floor((ms / 1000 / 60) << 0);\n    const sec = Math.floor((ms / 1000) % 60);\n\n    return (min > 58 && sec > 0);\n  }\n\n  async getLocation(latitude, longitude) {\n    this.foreCastAPI.data.latitude = latitude;\n    this.foreCastAPI.data.longitude = longitude;\n    this.data.lastUpdate = this.getLastUpdate(this.currentDate);\n\n    if (this.updateCache()) {\n      localStorage.clear();\n\n      await this.reverseGeoLocation.fetch(latitude, longitude);\n      await this.foreCastAPI.fetch(latitude, longitude);\n\n      localStorage.setItem('lastupdate', this.currentDate.toString());\n      localStorage.setItem('forecast', JSON.stringify(this.foreCastAPI.data));\n\n      this.ipGeoLocation.data.city = this.reverseGeoLocation.data[0].city || this.reverseGeoLocation.data[0].state;\n\n      this.update();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}